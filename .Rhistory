cat("\nResidual standard error:" , sqrt(obj$rv) ,"on", obj$degree_freedom ,"degrees of freedom")
}
summary(mod_object)
# pred
pred.linreg <- function(obj){
return(obj$coefficient)
}
pred.linreg(mod_object)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- lm(Petal.Length~Species, data = iris)
# pred
pred.linreg <- function(obj){
return(obj$coefficient)
}
pred.linreg(mod_object)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- linreg(Petal.Length~Species, data = iris)
# print
print.linreg <- function(obj){
#cat("Call:\n")
#print(obj$call)
cat("\nCoefficients:\n")
print(obj$coefficients)
}
print(mod_object)
# print
print.linreg <- function(obj){
cat("Call:\n")
print(obj$call)
cat("\nCoefficients:\n")
print(obj$coefficients)
}
print(mod_object)
# pred
pred.linreg <- function(obj){
return(obj$coefficient)
}
pred(mod_object)
mahnaz.linreg <- function(obj){
print("hi")
}
mahnaz(mod_object)
coef.linreg <- function(obj){
print("hi")
}
coef(mod_object)
# pred
pred <- function(obj){
return(obj$coefficient)
}
pred(mod_object)
# coef
coef.linreg <- function(obj){
return(obj$coefficients)
}
coef(mod_object)
# pred
pred.linreg <- function(obj){
return(obj$coefficient)
}
pred(mod_object)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- linreg(Petal.Length~Species, data = iris)
# pred
pred.linreg <- function(obj){
return(obj$fitted_values)
}
pred(mod_object)
# pred
predict.linreg <- function(obj){
return(obj$fitted_values)
}
predict(mod_object)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- linreg(Petal.Length~Species, data = iris)
# pred
predict.linreg <- function(obj){
#return(obj$fitted_values)
print("hi")
}
predict(mod_object)
# pred
predict.linreg <- function(obj){
return(obj$fitted_values)
}
predict(mod_object)
# pred
pred <- function (obj) {
UseMethod("predict", obj)
}
pred.linreg <- function(obj){
return(obj$fitted_values)
}
pred(mod_object)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- linreg(Petal.Length~Species, data = iris)
# print
print.linreg <- function(obj){
cat("Call:\n")
print(obj$call)
cat("\nCoefficients:\n")
print(obj$coefficients)
}
print(mod_object)
# pred
pred <- function (obj) {
UseMethod("predict", obj)
}
pred.linreg <- function(obj){
return(obj$fitted_values)
}
pred(mod_object)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- linreg(Petal.Length~Species, data = iris)
predict.linreg <- function(obj){
return(obj$fitted_values)
}
predict(mod_object)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- linreg(Petal.Length~Species, data = iris)
# print
print.linreg <- function(obj){
cat("Call:\n")
print(obj$call)
cat("\nCoefficients:\n")
print(obj$coefficients)
}
print(mod_object)
# pred
pred <- function (obj) {
UseMethod("linreg", obj)
}
pred.linreg <- function(obj){
return(obj$fitted_values)
}
pred(mod_object)
# pred
pred <- function (obj) {
UseMethod("pred", obj)
}
pred.linreg <- function(obj){
return(obj$fitted_values)
}
pred(mod_object)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
data("iris")
linreg(Petal.Length~Sepdsal.Width+Sepal.Length, data=iris)
library(Lab4)
data("iris")
linreg(Petal.Length~Sepdsal.Width+Sepal.Length, data=iris)
linreg(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
linreg <- function(formula,data){
col_names <- c(names(data))
for(i in 1:length(all.vars(formula))){
stopifnot(all.vars(formula)[i] %in% col_names)
}
x <- model.matrix(formula, data)
m <- data[all.vars(formula)[1]]
y <- as.matrix(m)
Bhat <- as.vector(solve((t(x) %*% x))%*% (t(x) %*% y))
yhat <- as.vector(c( x %*% Bhat))
ehat <- as.vector(y-yhat)
degrees_of_freedom <- nrow(x)-ncol(x)
residual_variance <- c((t(ehat)%*%ehat ) / degrees_of_freedom)
variance_regression_coefficients <- residual_variance * solve((t(x) %*% x))
t_values <- Bhat / sqrt(diag(variance_regression_coefficients))
betahat <- t_values*sqrt(diag(variance_regression_coefficients))
#QR
QR <- qr(x)
QR_pivot <- QR$pivot[1:QR$rank]
betahat_QR <- solve.qr(QR, y)
yhat_QR <- as.vector(c(x[,QR_pivot] %*% betahat))
resi_QR <- as.vector(y - yhat_QR)
degrees_of_freedom_QR <- nrow(x) - QR$rank
residual_variance_QR <- c((t(resi_QR)%*%resi_QR ) / degrees_of_freedom)
variance_regression_coefficients_QR = sqrt(residual_variance_QR)
return_obj <- list(coefficients = betahat, fitted_values = yhat,
residuals = ehat, degree_freedom = degrees_of_freedom,
rv = residual_variance, varreg_coef = variance_regression_coefficients,
t_value = t_values
,call=match.call(),coefficients_QR=betahat_QR,
varr_QR=variance_regression_coefficients_QR,data=data,formula=formula)
class(return_obj) <- 'linreg'
return(return_obj)
}
mod_object <- linreg(Petal.Length~Species, data = iris)
#' @export
print.linreg <- function(obj){
cat("Call:\n")
print(obj$call)
cat("\nCoefficients:\n")
print(obj$coefficients)
}
print(mod_object)
#' @export
resid.linreg <- function(obj){
return(obj$residuals)
}
print(resid)
pred <- function (obj) {
UseMethod("pred")
}
#' @export
pred.linreg <- function(obj){
return(obj$fitted_values)
}
resid(mod_object)
pred(mod_object)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
library(Lab4)
